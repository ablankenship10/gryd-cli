var common = require('../services/common');

var <%=cont %> = module.exports = function (config, app, db) {
  this.model = db.model("<%=model %>");
  app.get('/<%=plural %>', this.list.bind(this));
  app.get('/<%=plural %>/:id', this.show.bind(this));
  app.post('/<%=plural %>', this.create.bind(this));
  app.put('/<%=plural %>/:id', this.update.bind(this));
  app.delete('/<%=plural %>/:id', this.remove.bind(this));
};

<%=cont %>.prototype.list = function (req, res) {
  var model = this.model;
  model.find({}, function (err, <%=plural %>) {
    if (err){
      console.error("<%=singular %> List Error:", err);
      common.error(res, 500, 5000);
    } else if(!<%=plural %>) {
      common.error(res,404,4041);
    } else {
      common.success(res, model.multi(<%=plural %>));
    }
  });
};

<%=cont %>.prototype.show = function (req, res) {
  var model = this.model;
  model.findOne({id: req.param('id')}, function (err, <%=singular %>) {
    if (err){
      console.error("<%=singular %> Show Error:", err);
      common.error(res, 500, 5000);
    } else if(!<%=singular %>) {
      common.error(res,404,4041);
    } else {
      common.success(res, model.single(<%=singular %>));
    }
  });
};

<%=cont %>.prototype.create = function (req, res) {
  var body = req.body,
    model = this.model,
    rules = {
      name: ['required'],
      value: ['required']
    };

  req.GrydValidateBody(rules, function (err) {
    if (err) {
      common.error(res, 400, 4000, err);
    } else {
      var <%=singular %> = new model({
        name: body.name,
        value: body.value
      });

      <%=singular %>.save(function (err, <%=singular %>) {
        if (err) {
          console.error("<%=singular %> Create Error:", err);
          common.error(res, 500, 5000);
        } else {
          common.success(res, model.single(<%=singular %>));
        }
      });
    }
  });
};

<%=cont %>.prototype.update = function (req, res) {
  var body = req.body,
    model = this.model,
    rules = {
      name: ['required'],
      value: ['required']
    };

  req.GrydValidateBody(rules, function (err) {
    if (err) {
      common.error(res, 400, 4000, err);
    } else {
      model.findOne({id:req.param('id')},function(err,<%=singular %>){
        if(err){
          console.error("<%=singular %> Update Error:", err);
          common.error(res, 500, 5000);
        } else if(!<%=singular %>){
          common.error(res,404,4041);
        } else {
          <%=singular %>.set('name',body.name);
          <%=singular %>.set('value',body.value);
          <%=singular %>.save(function (err, <%=singular %>) {
            if (err) {
              console.error("<%=singular %> Create Error:", err);
              common.error(res, 500, 5000);
            } else {
              common.success(res, model.single(<%=singular %>));
            }
          });
        }
      });
    }
  });
};

<%=cont %>.prototype.remove = function (req, res) {
  var model = this.model;
  model.remove({id: req.param('id')}, function (err) {
    if (err){
      console.error("<%=singular %> Delete Error:", err);
      common.error(res, 500, 5000);
    } else {
      common.success(res);
    }
  });
};